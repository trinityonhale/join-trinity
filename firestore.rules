rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents {

    function verifyFields(required, optional) {
      let defaultFields = ['schemaVersion'];
      let allAllowedFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required.concat(defaultFields)) &&
        request.resource.data.keys().hasOnly(allAllowedFields.concat(defaultFields));
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isLoggedIn() {
      return request.auth != null;
    }

    function isAuthor() {
      return request.auth != null && resource.data.uid == request.auth.uid;
    }

    match /{document=**} {
      allow write, read: if false;
    }

    match /quests/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /userQuests/{document=**} {
      allow create: if isLoggedIn() && request.resource.data.uid == request.auth.uid;
      allow delete: if isAdmin() || resource.data.uid == request.auth.uid;
      allow read: if isAdmin() || resource.data.uid == request.auth.uid;
    }

    match /quests/{questId}/assignments/{document=**} {

      function canAssign() {
        // If current assignment is null
        return resource == null
          && get(request.resource.data.assignee).id == request.auth.uid;
      }

      function canUnassign() {
        // If current assignment is not null
        return resource.data != null
          && get(resource.data.assignee).id == request.auth.uid;
      }

      allow create: if isAdmin() || (isLoggedIn() && canAssign());
      allow delete: if isAdmin() || (isLoggedIn() && canUnassign());
      allow read: if true;
    }

    match /users/{uid} {
      // is same user, can only update displayName and photoUrl
      allow update: if request.auth.uid == uid
       && resource.data.uid == request.auth.uid
       && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
        'displayName', 'photoUrl'
      ]);

      allow read: if true;
    }

    match /users/{documents=**} {
      // user is logged in, has all fields, role is user
      allow create: if request.auth != null && verifyFields([
        'uid', 'displayName', 'photoUrl', 'role'
      ],[]) && request.resource.data.role == 'user'
    }

    match /proposals/{documents} {
      allow create: if isLoggedIn() && verifyFields([
        'title', 'content', 'attachments', 'createdAt', 'status', 'uid'
      ], []) && request.resource.data.status == 'pending'

      allow read: if true;

      allow update: if isAdmin() || (isLoggedIn() && (isAuthor() || isSignedFieldUpdate()));
      allow delete: if isAdmin();

      function isSignedFieldUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['signaturesCount']);
      }

      // function isCountMatch() {
      //   // Ensure signaturesCount matches the number of documents in the 'signatures' subcollection
      //   return get(/databases/$(database)/documents/proposals/$(document)/signatures)
      //         .size() == resource.data.signaturesCount;
      // }
    }

    match /proposals/{proposalId}/signatures/{documents=**} {
      allow create: if isLoggedIn() 
      && request.resource.data.keys().hasAll(['uid', 'displayName', 'createdAt', 'photoUrl'])
      && request.resource.data.uid == request.auth.uid;

      allow read: if true;
    }

    match /proposals/{proposalId}/comments/{documents=**} {
      allow create: if isLoggedIn() 
      && request.resource.data.keys().hasAll(['author', 'content', 'createdAt'])
      && request.resource.data.author.uid == request.auth.uid;

      allow read: if true;
    }

    match /proposals/{proposalId}/statusTimeline/{documents=**} {
      allow write: if isAdmin();
      allow read: if true;
    }
  }
}